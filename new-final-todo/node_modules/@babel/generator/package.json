{
  "_args": [
    [
      {
        "raw": "@babel/generator@^7.0.0-beta",
        "scope": "@babel",
        "escapedName": "@babel%2fgenerator",
        "name": "@babel/generator",
        "rawSpec": "^7.0.0-beta",
        "spec": ">=7.0.0-beta <8.0.0",
        "type": "range"
      },
      "C:\\Users\\Shruti\\Documents\\GitHub\\indiv-todo\\node_modules\\metro"
    ]
  ],
  "_from": "@babel/generator@>=7.0.0-beta <8.0.0",
  "_id": "@babel/generator@7.0.0-beta.46",
  "_inCache": true,
  "_location": "/@babel/generator",
  "_nodeVersion": "9.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/generator_7.0.0-beta.46_1524457808362_0.4803428707099102"
  },
  "_npmUser": {
    "name": "loganfsmyth",
    "email": "loganfsmyth@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@babel/generator@^7.0.0-beta",
    "scope": "@babel",
    "escapedName": "@babel%2fgenerator",
    "name": "@babel/generator",
    "rawSpec": "^7.0.0-beta",
    "spec": ">=7.0.0-beta <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@babel/core",
    "/@babel/traverse",
    "/metro"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.0.0-beta.46.tgz",
  "_shasum": "6f57159bcc28bf8c3ed6b549789355cebfa3faa7",
  "_shrinkwrap": null,
  "_spec": "@babel/generator@^7.0.0-beta",
  "_where": "C:\\Users\\Shruti\\Documents\\GitHub\\indiv-todo\\node_modules\\metro",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "dependencies": {
    "@babel/types": "7.0.0-beta.46",
    "jsesc": "^2.5.1",
    "lodash": "^4.2.0",
    "source-map": "^0.5.0",
    "trim-right": "^1.0.1"
  },
  "description": "Turns an AST into code.",
  "devDependencies": {
    "@babel/helper-fixtures": "7.0.0-beta.46",
    "babylon": "7.0.0-beta.46"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-5VfaEVkPG0gpNSTcf70jvV+MjbMoNn4g2iluwM7MhciedkolEtmG7PcdoUj5W1EmMfngz5cF65V7UMZXJO6y8Q==",
    "shasum": "6f57159bcc28bf8c3ed6b549789355cebfa3faa7",
    "tarball": "https://registry.npmjs.org/@babel/generator/-/generator-7.0.0-beta.46.tgz",
    "fileCount": 21,
    "unpackedSize": 111311,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3WFQCRA9TVsSAnZWagAAhLwP/i8u0EGOc87VxDvxMNRS\nRshwtTgX8kG1Knrc3EGbOkFYqYO68YaFCwTxHBAalKzSKVgEHP9qVOOxUhS+\nwoC8txSwPNqw0cV2DYc6KQyEBYPDWPd8MD1JOKUaV4r3x9S0t2UYFEMxm0GQ\nRxrFO3CNVT3RV6Ko2/1GcsJ20Ld0HL2DPzDi0aZpAMpiTwMk3IDH6AbrFid5\nvtEgbSWhNw0ifo/thBz0oIZGJLq0+Voj0yUQUPNKkY9bzUknr1O36X8JgaQN\nCIU6Qoqlh9tTcAUmWOsC/9/C1gy6DCz1UNhl8Y9Q6jLuiqAzxRoi0pLYij4F\nmA3ckaKyP+ZHJDLDV/xDg0QOoZGp2NNJebvXPgO7/DIAzhORfJmUOkLYb7ae\neic/XeSiRSDNVHBlZ9uChL/Ow3sfKoBzdp6trTpf3VYSEaeU4VJb3OP36DpU\nWcfXnj7u+3hOpK03AAA3RuDag2q9fMDKTvvDRi2LZqrW3zLtOy7rAvwexi81\nv/dzOJcOLEZdjgh2bqe3rXY7NWqxvCLivKwFzZU7GJfQXN2A0RDB/hD61nYj\nFcmP4+UjyptOLZHYNpJJCBURBdvQWI9Xsxi31JGxIzMx2ZFechju2lKmG1cb\n68cARuH8NUCzS1YBwNBd0p/sWyRFX4qJ6rv+5ogHdx4QGda7fALSbjQPKEO+\nOC3q\r\n=PW0B\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "name": "@babel/generator",
  "optionalDependencies": {},
  "readme": "# @babel/generator\n\n> Turns a [Babylon AST](https://github.com/babel/babel/blob/master/packages/babylon/ast/spec.md) into code.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/generator\n```\n\n## Usage\n\n```js\nimport {parse} from 'babylon';\nimport generate from '@babel/generator';\n\nconst code = 'class Example {}';\nconst ast = parse(code);\n\nconst output = generate(ast, { /* options */ }, code);\n```\n\n## Options\n\nOptions for formatting output:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nauxiliaryCommentBefore | string   |                 | Optional string to add as a block comment at the start of the output file\nauxiliaryCommentAfter  | string   |                 | Optional string to add as a block comment at the end of the output file\nshouldPrintComment     | function | `opts.comments` | Function that takes a comment (as a string) and returns `true` if the comment should be included in the output.  By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment contains `@preserve` or `@license`\nretainLines            | boolean  | `false`         | Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces)\nretainFunctionParens   | boolean  | `false`         | Retain parens around function expressions (could be used to change engine parsing behavior)\ncomments               | boolean  | `true`          | Should comments be included in output\ncompact                | boolean or `'auto'` | `opts.minified` | Set to `true` to avoid adding whitespace for formatting\nminified               | boolean  | `false`         | Should the output be minified\nconcise                | boolean  | `false`         | Set to `true` to reduce whitespace (but not as much as `opts.compact`)\nfilename               | string   |                 | Used in warning messages\njsonCompatibleStrings  | boolean  | `false`         | Set to true to run `jsesc` with \"json\": true to print \"\\u00A9\" vs. \"Â©\";\n\nOptions for source maps:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nsourceMaps             | boolean  | `false`         | Enable generating source maps\nsourceRoot             | string   |                 | A root for all relative URLs in the source map\nsourceFileName         | string   |                 | The filename for the source code (i.e. the code in the `code` argument).  This will only be used if `code` is a string.\n\n## AST from Multiple Sources\n\nIn most cases, Babel does a 1:1 transformation of input-file to output-file.  However,\nyou may be dealing with AST constructed from multiple sources - JS files, templates, etc.\nIf this is the case, and you want the sourcemaps to reflect the correct sources, you'll need\nto pass an object to `generate` as the `code` parameter.  Keys\nshould be the source filenames, and values should be the source content.\n\nHere's an example of what that might look like:\n\n```js\nimport {parse} from 'babylon';\nimport generate from '@babel/generator';\n\nconst a = 'var a = 1;';\nconst b = 'var b = 2;';\nconst astA = parse(a, { sourceFilename: 'a.js' });\nconst astB = parse(b, { sourceFilename: 'b.js' });\nconst ast = {\n  type: 'Program',\n  body: [].concat(astA.program.body, astB.program.body)\n};\n\nconst { code, map } = generate(ast, { sourceMaps: true }, {\n  'a.js': a,\n  'b.js': b\n});\n\n// Sourcemap will point to both a.js and b.js where appropriate.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-generator"
  },
  "version": "7.0.0-beta.46"
}
